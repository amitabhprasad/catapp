# This Task is from the Tekton Catalog (last updated 04/02/18):
# https://github.com/tektoncd/catalog/blob/master/buildah/buildah.yaml
# This Task uses buildah to build and push an image.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  params:
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: quay.io/buildah/stable:v1.11.0
      type: string
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
      type: string
    - name: CONTEXT
      description: Path to the directory to use as context.
      default: .
      type: string
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
      type: string
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
      type: string

  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image

  steps:
    - name: build
      image: $(inputs.params.BUILDER_IMAGE)
      workingDir: /workspace/source
      command: ['buildah', 'bud', '--format=$(inputs.params.FORMAT)', '--tls-verify=$(inputs.params.TLSVERIFY)', '--layers', '-f', '$(inputs.params.DOCKERFILE)', '-t', '$(outputs.resources.image.url)', '$(inputs.params.CONTEXT)']
      volumeMounts:
      - name: varlibcontainers
        mountPath: /var/lib/containers
      securityContext:
        privileged: true

    - name: push
      image: $(inputs.params.BUILDER_IMAGE)
      workingDir: /workspace/source
      command: ['buildah', 'push', '--tls-verify=$(inputs.params.TLSVERIFY)', '$(outputs.resources.image.url)', 'docker://$(outputs.resources.image.url)']
      volumeMounts:
      - name: varlibcontainers
        mountPath: /var/lib/containers
      securityContext:
        privileged: true

  volumes:
    - name: varlibcontainers
      emptyDir: {}
---
# This Task applies Kubernetes resource files with oc apply -f. Then it updates
# the target Deployment image.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-openshift
spec:
  params:
    - name: K8S_DIRECTORY_PATH
      description: Path to the directory for oc apply -f
      default: config/
      type: string
    - name: DEPLOYMENT
      description: Name of the Deployment and the container name in the Deployment
      type: string
    - name: NAMESPACE
  resources:
    inputs:
      - name: source
        type: git
      - name: image
        type: image
  steps:
    - name: apply-config
      image: quay.io/openshift/origin-cli:latest
      workingDir: /workspace/source
      command: ['/bin/bash', '-c']
      args:
      - |-
        oc apply -k $(inputs.params.K8S_DIRECTORY_PATH) -n $(inputs.params.NAMESPACE)
    - name: patch-deployment
      image: quay.io/openshift/origin-cli:latest
      command: ['/bin/bash', '-c']
      args:
      - |-
        oc patch deployment $(inputs.params.DEPLOYMENT) --patch='{"spec":{"template":{"spec":{
          "containers":[{
            "name": "$(inputs.params.DEPLOYMENT)",
            "image":"$(inputs.resources.image.url)"
          }]
        }}}}'
---
# This Pipeline builds and deploys an image on OpenShift.
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy-openshift
spec:
  resources:
    - name: source
      type: git
    - name: image
      type: image
  params:
    - name: DEPLOYMENT
      description: Name of the Deployment and the container name in the Deployment
      type: string
    - name: K8S_DIRECTORY_PATH
      description: Path to the directory for kubectl apply -f
      type: string
      default: config/
    - name: URL
      description: GIT repo url
      type: string
    - name: REVISION
      description: image tag id mapped to git revision
      type: string
    - name: NAMESPACE
      description: namespace to deploy app
      type: string
  workspaces:
    - name: workspace
  tasks:
    - name: build
      taskRef:
        name: buildah
      resources:
        inputs:
          - name: source
            resource: source
        outputs:
          - name: image
            resource: image
      params:
        - name: TLSVERIFY
          value: 'false'
    - name: deploy
      runAfter: [build]
      taskRef:
        name: deploy-openshift
      resources:
        inputs:
          - name: source
            resource: source
          - name: image
            resource: image
      params:
        - name: K8S_DIRECTORY_PATH
          value: "$(params.K8S_DIRECTORY_PATH)"
        - name: DEPLOYMENT
          value: "$(params.DEPLOYMENT)"
        - name: NAMESPACE
          value: "$(params.NAMESPACE)"
    - name: update
      runAfter: [deploy]
      taskRef:
        name: git-update-deployment
        kind: Task
      params:
        - name: GIT_REPOSITORY
          value: "$(params.URL)"
        - name: GIT_USERNAME
          value: "amitabhprasad"
        - name: GIT_PASSWORD
          value: "0d59e5bb4bbd05c53a30a122f2b30bd2cd0f5428"
        - name: CURRENT_IMAGE
          value: "index.docker.io/amitabhprasad/catapp:latest"
        - name: NEW_IMAGE
          value: "index.docker.io/amitabhprasad/catapp"
        - name: GIT_COMMIT_ID
          value: "$(params.REVISION)"
        - name: KUSTOMIZATION_PATH
          value: "config"
      workspaces:
        - name: workspace
          workspace: workspace